server:
  port: 8088
  
spring:
  shardingsphere:
    mode:
      type: Standalone
      repository:
        type: H2
      overwrite: true

    datasource:
      names: ds_0,ds_1
      ds_0:
        url: jdbc:opengauss://127.0.0.1:15432/demo_ds_0?batchMode=on
        username: gaussdb
        password: Secretpassword@123
        connectionTimeoutMilliseconds: 30000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 1
      ds_1:
        url: jdbc:opengauss://127.0.0.1:15432/demo_ds_0?batchMode=on
        username: gaussdb
        password: Secretpassword@123
        connectionTimeoutMilliseconds: 30000
        idleTimeoutMilliseconds: 60000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 1

#    rules:
#      sharding:
#        tables:
#          t_order:
#            actual-data-nodes: ds_${0..1}.t_order_${0..1}
#            table-strategy:
#              standard:
#                sharding-column: order_id
#                sharding-algorithm-name: t_order_inline
#            key-generate-strategy:
#              column: order_id
#              keyGeneratorName: snowflake
#          t_order_view:
#            actualDataNodes: ds_${0..1}.t_order_view_${0..1}
#            tableStrategy:
#              standard:
#                shardingColumn: order_id
#                shardingAlgorithmName: t_order_view_inline
#          t_order_view2:
#            actualDataNodes: ds_${0..1}.t_order_view2_${0..1}
#            tableStrategy:
#              standard:
#                shardingColumn: order_id
#                shardingAlgorithmName: t_order_view2_inline
#          t_item:
#            actualDataNodes: ds_${0..1}.t_item_${0..1}
#            tableStrategy:
#              standard:
#                shardingColumn: id
#                shardingAlgorithmName: t_item_inline
#            keyGenerateStrategy:
#              column: order_id
#              keyGeneratorName: snowflake
#        binding-tables:
#          - t_order,t_order_view,t_order_view2
#        default-database-strategy:
#          standard:
#            shardingColumn: user_id
#            shardingAlgorithmName: database_inline
#        default-table-strategy:
#          none:
#
#        shardingAlgorithms:
#          database_inline:
#            type: INLINE
#            props:
#              algorithm-expression: ds_${user_id % 2}
#          t_order_inline:
#            type: INLINE
#            props:
#              algorithm-expression: t_order_${order_id % 2}
#          t_order_view_inline:
#            type: INLINE
#            props:
#              algorithm-expression: t_order_view_${order_id % 2}
#          t_order_view2_inline:
#            type: INLINE
#            props:
#              algorithm-expression: t_order_view2_${order_id % 2}
#          t_item_inline:
#            type: INLINE
#            props:
#              algorithm-expression: t_item_${id % 2}
#
#        keyGenerators:
#          snowflake:
#            type: SNOWFLAKE